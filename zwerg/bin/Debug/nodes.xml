<?xml version="1.0" encoding="utf-8" ?>
<nodes>

  <!-- DISTANCE OBJECTS -->
  <node type="dp" name="cube" caption="Cube" mask="sdBox({A}-vec3({0}),vec3({1}))">
    <properties>
      <property name="position" type="vec3" default="0.0,0.0,0.0" />
      <property name="size" type="vec3" default="0.2,0.2,0.2" />
      <property name="color" type="vec3" default="1.0,1.0,1.0" />
    </properties>
    <function>
      float sdBox(vec3 p, vec3 b)
      {
      vec3 d = abs(p) - b;
      return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));
      }
    </function>
  </node>
  <node type="dp" name="sphere" caption="Sphere" mask="sdSphere({A}-vec3({0}),{1})">
    <properties>
      <property name="position" type="vec3" default="0.0,0.0,0.0" />
      <property name="radius" type="float" default="0.4" />
      <property name="color" type="vec3" default="1.0,1.0,1.0" />
    </properties>
    <function>
      float sdSphere(vec3 p, float r)
      {
      p.y *= 1.06;
      return length(p)-r;
      }
    </function>
  </node>
  <node type="dp" name="cylinder" caption="Cylinder" mask="sdCappedCylinder({A}-vec3({0}), vec2({1}))">
    <properties>
      <property name="position" type="vec3" default="0.0,0.0,0.0" />
      <property name="size" type="vec2" default="0.2,0.5" />
      <property name="color" type="vec3" default="1.0,1.0,1.0" />
    </properties>
    <function>
      float sdCappedCylinder(vec3 p, vec2 h)
      {
      vec2 d = abs(vec2(length(p.xz),p.y)) - h;
      return min(max(d.x,d.y),0.0) + length(max(d,0.0));
      }
    </function>
  </node>
  <node type="dp" name="torus" caption="Torus" mask="sdTorus({A}-vec3({0}), vec2({1}))">
    <properties>
      <property name="position" type="vec3" default="0.0,0.0,0.0" />
      <property name="size" type="vec2" default="0.5,0.15" />
      <property name="color" type="vec3" default="1.0,1.0,1.0" />
    </properties>
    <function>
      float sdTorus(vec3 p, vec2 t)
      {
      vec2 q = vec2(length(p.xy)-t.x,p.z);
      return length(q)-t.y;
      }
    </function>
  </node>
  <node type="dp" name="capsule" caption="Capsule" mask="sdCapsule({A}-vec3({0}), vec3({1}), vec3({2}), {3})">
    <properties>
      <property name="position" type="vec3" default="0.0,0.0,0.0" />
      <property name="A" type="vec3" default="0.5,0.0,0.0" />
      <property name="B" type="vec3" default="-0.5,0.0,0.0" />
      <property name="radius" type="float" default="0.2" />
      <property name="color" type="vec3" default="1.0,1.0,1.0" />
    </properties>
    <function>
      float sdCapsule(vec3 p, vec3 a, vec3 b, float r)
      {
      vec3 pa = p - a, ba = b - a;
      float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );
      return length( pa - ba*h ) - r;
      }
    </function>
  </node>
  <node type="dp" name="hexprism" caption="Hex Prism" mask="sdHexPrism({A}-vec3({0}),vec2({1},{2}))">
    <properties>
      <property name="position" type="vec3" default="0.0,0.0,0.0" />
      <property name="radius" type="float" default="0.5" />
      <property name="height" type="float" default="0.1" />
      <property name="color" type="vec3" default="1.0,1.0,1.0" />
    </properties>
    <function>
      float sdHexPrism(vec3 p, vec2 h)
      {
      vec3 q = abs(p);
      return max(q.z-h.y,max(q.x+q.y*0.57735,q.y*1.1547)-h.x);
      }
    </function>
  </node>
  <node type="dp" name="triprism" caption="Tri Prism" mask="sdTriPrism({A}-vec3({0}), vec2({1}))">
    <properties>
      <property name="position" type="vec3" default="0.0,0.0,0.0" />
      <property name="size" type="vec2" default="0.4,0.2" />
      <property name="color" type="vec3" default="1.0,1.0,1.0" />
    </properties>
    <function>
      float sdTriPrism(vec3 p, vec2 h)
      {
      vec3 q = abs(p);
      return max(q.z-h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);
      }
    </function>
  </node>
  <node type="dp" name="plane" caption="Plane" mask="sdPlane({A}-vec3({0}),vec4({1}))">
    <properties>
      <property name="position" type="vec3" default="0.0,0.0,0.0" />
      <property name="orientation" type="vec4" default="0.0,1.0,0.0,0.1" />
      <property name="color" type="vec3" default="0.3,0.3,0.3" />
    </properties>
    <function>
      float sdPlane(vec3 p, vec4 n)
      {
      n.xyz = normalize(n.xyz);
      return dot(p,n.xyz) + n.w;
      }
    </function>
  </node>

  <!-- DISTANCE OPERATIONS/DEFORMATION -->
  <node type="distop" name="union" caption="Union" mask="opU({0},{1})">
    <function>
      float opU(float d1, float d2)
      {
      return min(d1,d2);
      }
    </function>
  </node>
  <node type="distop" name="subtraction" caption="Subtraction" mask="opS({0},{1})">
    <function>
      float opS(float d1, float d2)
      {
      return max(-d1,d2);
      }
    </function>
  </node>
  <node type="distop" name="intersection" caption="Intersection" mask="opI({0},{1})">
    <function>
      float opI(float d1, float d2)
      {
      return max(d1,d2);
      }
    </function>
  </node>

  <node type="distop" name="blend" caption="Blend" mask="smin({0},{1},{2})">
    <properties>
      <property name="distance1" type="float" default="{0}" />
      <property name="distance2" type="float" default="{1}" />
      <property name="blend" type="float" default="0.1" />
    </properties>
    <function>
      float smin(float a, float b, float k)
      {
      float h = clamp(0.5+0.5*(b-a)/k, 0.0, 1.0);
      return mix(b, a, h) - k*h*(1.0-h);
      }
    </function>
  </node>

  <!-- DOMAIN OPERATIONS -->
  <node type="domop" name="repetition-x" caption="Repetition X" mask="vec3 {B}=opRepX({A}-vec3({0},{A}.y,{A}.z),{1})">
    <properties>
      <property name="shift" type="float" default="0.0" />
      <property name="period" type="float" default="1.0" />
    </properties>
    <function>
      vec3 opRepX(vec3 p, float c)
      {
      return vec3(mod(p.x,c)-0.5*c,p.y,p.z);
      }
    </function>
  </node>
  <node type="domop" name="repetition-y" caption="Repetition Y" mask="vec3 {B}=opRepY({A}-vec3({A}.x,{0},{A}.z),{1})">
    <properties>
      <property name="shift" type="float" default="0.0" />
      <property name="period" type="float" default="1.0" />
    </properties>
    <function>
      vec3 opRepY(vec3 p, float c)
      {
      return vec3(p.x,mod(p.y,c)-0.5*c,p.z);
      }
    </function>
  </node>
  <node type="domop" name="repetition-z" caption="Repetition Z" mask="vec3 {B}=opRepZ({A}-vec3({A}.x,{A}.y,{0}),{1})">
    <properties>
      <property name="shift" type="float" default="0.0" />
      <property name="period" type="float" default="1.0" />
    </properties>
    <function>
      vec3 opRepZ(vec3 p, float c)
      {
      return vec3(p.x,p.y,mod(p.z,c)-0.5*c);
      }
    </function>
  </node>
  <node type="domop" name="repetition" caption="Repetition XYZ" mask="vec3 {B}=opRep({A}-vec3({0}),vec3({1}))">
    <properties>
      <property name="shift" type="vec3" default="0.0,0.0,0.0" />
      <property name="period" type="vec3" default="1.0,1.0,1.0" />
    </properties>
    <function>
      vec3 opRep(vec3 p, vec3 c)
      {
      return mod(p,c)-0.5*c;
      }
    </function>
  </node>
  <node type="domop" name="circular" caption="Circular Y" mask="vec3 {B}=opRepCircular({A},{0})">
    <properties>
      <property name="period" type="float" default="5.0" />
    </properties>
    <function>
      vec3 opRepCircular(vec3 p, float period)
      {
      return vec3(atan(p.z,p.x)*period/pi2,p.y,length(p.xz));
      }
    </function>
  </node>
  <node type="domop" name="rotation-x" caption="Rotation X" mask="vec3 {B}=opRotX({A},{0})">
    <properties>
      <property name="radian" type="float" default="0.7854" />
    </properties>
    <function>
      vec3 opRotX(vec3 p, float a)
      {
      p.yz = rotate(p.yz, a);
      return p;
      }
    </function>
  </node>
  <node type="domop" name="rotation-y" caption="Rotation Y" mask="vec3 {B}=opRotY({A},{0})">
    <properties>
      <property name="radian" type="float" default="0.7854" />
    </properties>
    <function>
      vec3 opRotY(vec3 p, float a)
      {
      p.xz = rotate(p.xz, a);
      return p;
      }
    </function>
  </node>
  <node type="domop" name="rotation-z" caption="Rotation Z" mask="vec3 {B}=opRotZ({A},{0})">
    <properties>
      <property name="radian" type="float" default="0.7854" />
    </properties>
    <function>
      vec3 opRotZ(vec3 p, float a)
      {
      p.xy = rotate(p.xy, a);
      return p;
      }
    </function>
  </node>

</nodes>